;; العقد الذكي لعملة Smart Coin على شبكة TON
;; اسم العملة: SmartCoin
;; الرمز: SMC
;; التوتال سبلاي: 100,000,000 SMC

#include "stdlib.fc";

;; هيكل بيانات العقد
;; storage#_ total_supply:Coins owner_address:MsgAddress
;;           token_wallet_code:^Cell mint_requests:^(HashmapE 32 MintRequest)
;;           = Storage;

;; هيكل بيانات طلب التعدين
;; mint_request#_ user_address:MsgAddress amount:Coins timestamp:uint64 = MintRequest;

;; ثوابت العقد
const int total_supply = 100000000000000; ;; 100,000,000 عملة بدقة 9 أرقام عشرية
const int min_tons_for_storage = 50000000; ;; 0.05 TON للتخزين
const int gas_consumption = 10000000; ;; 0.01 TON للعمليات

;; رموز الرسائل
const int op::transfer_tokens = 0x10;
const int op::mint_tokens = 0x11;
const int op::burn_tokens = 0x12;
const int op::claim_rewards = 0x13;
const int op::buy_mining_package = 0x14;

;; حالات الخطأ
const int error::access_denied = 401;
const int error::insufficient_funds = 402;
const int error::invalid_amount = 403;
const int error::invalid_address = 404;
const int error::already_minted = 405;

;; تخزين العقد
(int, slice, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; total_supply
        ds~load_msg_addr(), ;; owner_address
        ds~load_ref(), ;; token_wallet_code
        ds~load_ref() ;; mint_requests
    );
}

() save_data(int total_supply, slice owner_address, cell token_wallet_code, cell mint_requests) impure inline {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(owner_address)
        .store_ref(token_wallet_code)
        .store_ref(mint_requests)
        .end_cell());
}

;; دالة التحقق من المالك
() check_owner(slice sender_address, slice owner_address) impure inline {
    throw_unless(error::access_denied, equal_slices(sender_address, owner_address));
}

;; دالة إنشاء محفظة للمستخدم
cell calculate_user_wallet_address(slice owner_address, cell token_wallet_code) inline {
    cell state_init = begin_cell()
        .store_uint(0, 2)
        .store_dict(token_wallet_code)
        .store_dict(begin_cell().store_slice(owner_address).end_cell())
        .store_uint(0, 1)
        .end_cell();
    
    return begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell();
}

;; دالة تحويل العملات
() transfer_tokens(slice sender_address, slice to_address, int amount, int query_id) impure {
    ;; التحقق من صحة المعاملة
    throw_unless(error::invalid_amount, amount > 0);
    throw_unless(error::invalid_address, to_address.slice_bits() >= 3);
    
    ;; تحميل بيانات العقد
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    
    ;; التحقق من رصيد المرسل
    cell sender_wallet = calculate_user_wallet_address(sender_address, token_wallet_code);
    var (sender_balance, found) = get_balance(sender_wallet);
    throw_unless(error::insufficient_funds, found & (sender_balance >= amount));
    
    ;; تحديث رصيد المرسل
    set_balance(sender_wallet, sender_balance - amount);
    
    ;; تحديث رصيد المستلم
    cell receiver_wallet = calculate_user_wallet_address(to_address, token_wallet_code);
    var (receiver_balance, _) = get_balance(receiver_wallet);
    set_balance(receiver_wallet, receiver_balance + amount);
    
    ;; حفظ البيانات
    save_data(total_supply, owner_address, token_wallet_code, mint_requests);
    
    ;; إرسال إشعار بنجاح العملية
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::transfer_tokens, 32)
        .store_uint(query_id, 64)
        .store_slice(to_address)
        .store_coins(amount)
        .end_cell();
    
    send_raw_message(msg, 64);
}

;; دالة إنشاء عملات جديدة (للمالك فقط)
() mint_tokens(slice sender_address, slice to_address, int amount, int query_id) impure {
    ;; التحقق من صحة المعاملة
    throw_unless(error::invalid_amount, amount > 0);
    throw_unless(error::invalid_address, to_address.slice_bits() >= 3);
    
    ;; تحميل بيانات العقد
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    
    ;; التحقق من المالك
    check_owner(sender_address, owner_address);
    
    ;; التحقق من عدم تجاوز الحد الأقصى للعملات
    throw_unless(error::invalid_amount, total_supply + amount <= total_supply);
    
    ;; تحديث رصيد المستلم
    cell receiver_wallet = calculate_user_wallet_address(to_address, token_wallet_code);
    var (receiver_balance, _) = get_balance(receiver_wallet);
    set_balance(receiver_wallet, receiver_balance + amount);
    
    ;; تحديث إجمالي العملات
    total_supply += amount;
    
    ;; حفظ البيانات
    save_data(total_supply, owner_address, token_wallet_code, mint_requests);
    
    ;; إرسال إشعار بنجاح العملية
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::mint_tokens, 32)
        .store_uint(query_id, 64)
        .store_slice(to_address)
        .store_coins(amount)
        .end_cell();
    
    send_raw_message(msg, 64);
}

;; دالة حرق العملات
() burn_tokens(slice sender_address, int amount, int query_id) impure {
    ;; التحقق من صحة المعاملة
    throw_unless(error::invalid_amount, amount > 0);
    
    ;; تحميل بيانات العقد
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    
    ;; التحقق من رصيد المرسل
    cell sender_wallet = calculate_user_wallet_address(sender_address, token_wallet_code);
    var (sender_balance, found) = get_balance(sender_wallet);
    throw_unless(error::insufficient_funds, found & (sender_balance >= amount));
    
    ;; تحديث رصيد المرسل
    set_balance(sender_wallet, sender_balance - amount);
    
    ;; تحديث إجمالي العملات
    total_supply -= amount;
    
    ;; حفظ البيانات
    save_data(total_supply, owner_address, token_wallet_code, mint_requests);
    
    ;; إرسال إشعار بنجاح العملية
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::burn_tokens, 32)
        .store_uint(query_id, 64)
        .store_coins(amount)
        .end_cell();
    
    send_raw_message(msg, 64);
}

;; دالة شراء حزم التعدين
() buy_mining_package(slice sender_address, int package_id, int query_id) impure {
    ;; تحميل بيانات العقد
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    
    ;; تحديد سعر وقيمة الحزمة
    int price = 0;
    int mining_rate = 0;
    
    if (package_id == 1) {
        price = 100000000; ;; 0.1 TON
        mining_rate = 60;
    } elseif (package_id == 2) {
        price = 300000000; ;; 0.3 TON
        mining_rate = 90;
    } elseif (package_id == 3) {
        price = 500000000; ;; 0.5 TON
        mining_rate = 200;
    } else {
        throw(error::invalid_amount);
    }
    
    ;; التحقق من قيمة TON المرسلة
    int msg_value = get_msg_value();
    throw_unless(error::insufficient_funds, msg_value >= price + min_tons_for_storage + gas_consumption);
    
    ;; إضافة المستخدم إلى قائمة المعدنين بمعدل التعدين الجديد
    cell user_data = begin_cell()
        .store_slice(sender_address)
        .store_uint(mining_rate, 32)
        .store_uint(now(), 64)
        .end_cell();
    
    ;; تخزين بيانات المستخدم في قائمة المعدنين
    var miners = get_miners();
    miners~udict_set_ref(256, slice_hash(sender_address), user_data);
    set_miners(miners);
    
    ;; تحويل TON إلى المالك
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(owner_address)
        .store_coins(price)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::buy_mining_package, 32)
        .store_uint(query_id, 64)
        .store_slice(sender_address)
        .store_uint(package_id, 32)
        .end_cell();
    
    send_raw_message(msg, 1);
    
    ;; إرجاع الباقي إلى المرسل
    msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(sender_address)
        .store_coins(msg_value - price - gas_consumption)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();
    
    send_raw_message(msg, 1);
    
    ;; حفظ البيانات
    save_data(total_supply, owner_address, token_wallet_code, mint_requests);
}

;; دالة المطالبة بمكافآت التعدين
() claim_rewards(slice sender_address, int query_id) impure {
    ;; تحميل بيانات العقد
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    
    ;; التحقق من وجود المستخدم في قائمة المعدنين
    var miners = get_miners();
    var (user_data, found) = miners.udict_get_ref?(256, slice_hash(sender_address));
    throw_unless(error::access_denied, found);
    
    ;; استخراج بيانات المستخدم
    var cs = user_data.begin_parse();
    var user_address = cs~load_msg_addr();
    var mining_rate = cs~load_uint(32);
    var last_claim = cs~load_uint(64);
    
    ;; التحقق من مرور 24 ساعة على آخر مطالبة
    throw_unless(error::already_minted, now() - last_claim >= 86400);
    
    ;; حساب المكافأة
    int reward = mining_rate;
    
    ;; تحديث رصيد المستخدم
    cell user_wallet = calculate_user_wallet_address(sender_address, token_wallet_code);
    var (user_balance, _) = get_balance(user_wallet);
    set_balance(user_wallet, user_balance + reward);
    
    ;; تحديث وقت آخر مطالبة
    user_data = begin_cell()
        .store_slice(sender_address)
        .store_uint(mining_rate, 32)
        .store_uint(now(), 64)
        .end_cell();
    
    miners~udict_set_ref(256, slice_hash(sender_address), user_data);
    set_miners(miners);
    
    ;; تحديث إجمالي العملات
    total_supply += reward;
    
    ;; حفظ البيانات
    save_data(total_supply, owner_address, token_wallet_code, mint_requests);
    
    ;; إرسال إشعار بنجاح العملية
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::claim_rewards, 32)
        .store_uint(query_id, 64)
        .store_coins(reward)
        .end_cell();
    
    send_raw_message(msg, 64);
}

;; دالة معالجة الرسائل الواردة
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    if (op == op::transfer_tokens) {
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        transfer_tokens(sender_address, to_address, amount, query_id);
        return ();
    }
    
    if (op == op::mint_tokens) {
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        mint_tokens(sender_address, to_address, amount, query_id);
        return ();
    }
    
    if (op == op::burn_tokens) {
        int amount = in_msg_body~load_coins();
        burn_tokens(sender_address, amount, query_id);
        return ();
    }
    
    if (op == op::claim_rewards) {
        claim_rewards(sender_address, query_id);
        return ();
    }
    
    if (op == op::buy_mining_package) {
        int package_id = in_msg_body~load_uint(32);
        buy_mining_package(sender_address, package_id, query_id);
        return ();
    }
    
    throw(0xffff);
}

;; دالة الحصول على رصيد المستخدم
(int, int) get_balance(cell wallet_address) method_id {
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    var wallets = get_wallets();
    var (balance, found) = wallets.udict_get?(256, cell_hash(wallet_address));
    return (balance, found);
}

;; دالة تحديث رصيد المستخدم
() set_balance(cell wallet_address, int new_balance) impure {
    var wallets = get_wallets();
    wallets~udict_set(256, cell_hash(wallet_address), new_balance);
    set_wallets(wallets);
}

;; دالة الحصول على قائمة المحافظ
cell get_wallets() method_id {
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    var cs = get_data().begin_parse();
    cs~load_coins();
    cs~load_msg_addr();
    cs~load_ref();
    cs~load_ref();
    return cs~load_dict();
}

;; دالة تحديث قائمة المحافظ
() set_wallets(cell wallets) impure {
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(owner_address)
        .store_ref(token_wallet_code)
        .store_ref(mint_requests)
        .store_dict(wallets)
        .end_cell());
}

;; دالة الحصول على قائمة المعدنين
cell get_miners() method_id {
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    var cs = get_data().begin_parse();
    cs~load_coins();
    cs~load_msg_addr();
    cs~load_ref();
    cs~load_ref();
    cs~load_dict();
    return cs~load_dict();
}

;; دالة تحديث قائمة المعدنين
() set_miners(cell miners) impure {
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    var wallets = get_wallets();
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(owner_address)
        .store_ref(token_wallet_code)
        .store_ref(mint_requests)
        .store_dict(wallets)
        .store_dict(miners)
        .end_cell());
}

;; دالة الحصول على معلومات العقد
(int, slice, int) get_contract_info() method_id {
    var (total_supply, owner_address, token_wallet_code, mint_requests) = load_data();
    return (total_supply, owner_address, now());
}
